<div class="section-body">
    <h2 class="section-title">Dashboard</h2>
    <p class="section-lead">Data Map Kecamatan <%= districtActive.nama || 'Not Set' %>.</p>
    <div class="card">
        <div class="card-body">
            <div id="map" data-height="700" style="height: 700px; position: relative; overflow: hidden;"></div>
            <div class="row justify-content-center">
                <a href="/map" class="btn btn-primary btn-sm mt-3">Lihat Full Map</a>
            </div>
        </div>
    </div>
</div>

<script src="/javascripts/leaflet.ajax.js"></script>
<script>
    const backEndVillage = JSON.parse('<%- villages %>');
    const backEndGeoJson = '<%- geojson %>';
    const backEndPopulation = JSON.parse('<%- populations %>');
    const backEndReligion = JSON.parse('<%- religions %>');
    const backEndLivelihood = JSON.parse('<%- livelihoods %>');
    const backEndLive = JSON.parse('<%- lives %>');
    const backEndWorship = JSON.parse('<%- worships %>');
    const backEndHealth = JSON.parse('<%- healths %>');
    const backEndSchool = JSON.parse('<%- schools %>');
    function ucfirst(string){
        return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
    }

    // ICON
    const LeafIcon = L.Icon.extend({
        options: {
            iconSize:     [28, 30],
            iconAnchor:   [22, 30],
            popupAnchor:  [-8, -35]
        }
    });
    L.icon = function (options) {
        return new L.Icon(options);
    };
    
    // Marker Population
    let markPopulation = [];
    backEndPopulation.forEach(population => {
        let show = `Data Penduduk<br>
                    Laki-laki : ${population.laki_laki} <br>
                    Perempuan : ${population.perempuan}
                    <br><br>
                    <small> ${population.marker}</small>`;
        markPopulation.push(L.marker([population.latitude,population.longitude], {
            icon: new LeafIcon({iconUrl: '/icons/population.png'})
        }).bindPopup(show))
    })
    
    // Marker Religion
    let markReligion = [];
    backEndReligion.forEach(religion => {
        let show = `Data Agama<br>
                    Islam : ${religion.islam} <br>
                    Budha : ${religion.budha} <br>
                    Hindu : ${religion.hindu} <br>
                    Katolik : ${religion.katolik}
                    <br><br>
                    <small> ${religion.marker}</small>`;
        markReligion.push(L.marker([religion.latitude,religion.longitude], {
            icon: new LeafIcon({iconUrl: '/icons/religion.png'})
        }).bindPopup(show))
    })
    
    // Marker Livelihood
    let markLivelihood = [];
    backEndLivelihood.forEach(livelihood => {
        let show = `Data Mata Pencaharian<br>
                    PNS : ${livelihood.pns} <br>
                    Karyawan BUMN : ${livelihood.bumn} <br>
                    TNI : ${livelihood.tni} <br>
                    Polisi : ${livelihood.polisi}
                    <br><br>
                    <small> ${livelihood.marker}</small>`;
        markLivelihood.push(L.marker([livelihood.latitude,livelihood.longitude], {
            icon: new LeafIcon({iconUrl: '/icons/livelihood.png'})
        }).bindPopup(show))
    })
    
    // Marker Live
    let markLive = [];
    backEndLive.forEach(live => {
        let show = `Data Penduduk Hidup<br>
                    Lahir : ${live.lahir} <br>
                    Mati : ${live.mati} <br>
                    Datang : ${live.datang} <br>
                    Pindah : ${live.pindah}
                    <br><br>
                    <small> ${live.marker}</small>`;
        markLive.push(L.marker([live.latitude,live.longitude], {
            icon: new LeafIcon({iconUrl: '/icons/live.png'})
        }).bindPopup(show))
    })

    // Marker Worship
    let markWorship = [];
    backEndWorship.forEach(worship => {
        let show = `Data Peribadahan<br>
                    Islam : ${worship.islam} <br>
                    Gereja : ${worship.gereja} <br>
                    Pura : ${worship.pura} <br>
                    Vihara : ${worship.vihara}
                    <br><br>
                    <small> ${worship.marker}</small>`;
        markWorship.push(L.marker([worship.latitude,worship.longitude], {
            icon: new LeafIcon({iconUrl: '/icons/worship.png'})
        }).bindPopup(show))
    })
    
    // Marker Health
    let markHealth = [];
    backEndHealth.forEach(health => {
        let show = `Data Sarana Kesehatan<br>
                    Rumah Sakit : ${health.rumah_sakit} <br>
                    Rumah Sakit Bersalin : ${health.rumah_sakit_bersalin} <br>
                    Poliklinik : ${health.poliklinik}
                    <br><br>
                    <small> ${health.marker}</small>`;
        markHealth.push(L.marker([health.latitude,health.longitude], {
            icon: new LeafIcon({iconUrl: '/icons/health.png'})
        }).bindPopup(show))
    })

    // Marker School
    let markSchool = [];
    backEndSchool.forEach(school => {
        let show = `Data Sekolah<br>
                    SD : ${school.sd} <br>
                    MI : ${school.mi} <br>
                    SMP : ${school.smp} <br>
                    MTS : ${school.mts}
                    <br><br>
                    <small> ${school.marker}</small>`;
        markSchool.push(L.marker([school.latitude,school.longitude], {
            icon: new LeafIcon({iconUrl: '/icons/school.png'})
        }).bindPopup(show))
    })

    // Layer Maps
    const population = L.layerGroup(markPopulation);
    const religion = L.layerGroup(markReligion);
    const livelihood = L.layerGroup(markLivelihood);
    const live = L.layerGroup(markLive);
    const worship = L.layerGroup(markWorship);
    const health = L.layerGroup(markHealth);
    const school = L.layerGroup(markSchool);

	const map = L.map('map',{
        layers: [population, religion, livelihood, live, worship, health, school]
    }).setView(['<%= district.latitude %>', '<%= district.longitude %>'], 14);

    const overlayMaps = {
        "Data Penduduk": population,
        "Data Agama": religion,
        "Data Mata Pencaharian": livelihood,
        "Data Penduduk Hidup": live,
        "Data Peribadahan": worship,
        "Data Sarana Kesehatan": health,
        "Data Sekolah": school,
    };

    L.control.layers(null, overlayMaps, {position: 'bottomleft'}).addTo(map);

	const tiles = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
		maxZoom: 18,
		attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, ' +
			'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
		id: 'mapbox/streets-v11',
		tileSize: 512,
		zoomOffset: -1
	}).addTo(map);

    const info = L.control();

    // RIGHT POPUP
    info.onAdd = function (map) {
        this._div = L.DomUtil.create('div', 'info');
        this.update();
        return this._div;
    };

    info.update = function (props) {
        let desa = ''
        let luas = ''
        backEndVillage.map(val => {
            if(props){
                desa += props['DESA'] == val[0].toUpperCase() ? val[0] : '';
                luas += props['DESA'] == val[0].toUpperCase() ? val[2] : ''
            }
        })
        this._div.innerHTML = '<h4>KECAMATAN <%= districtActive.nama.toUpperCase() || "Not Set" %></h4><b></b> ' 
                              + (props ? 'Kelurahan ' + (desa) + '<br> Luas '  + luas + ' Km&sup2;' : ' Luas: <%- district.luas %> Km&sup2;');
    };

    info.addTo(map);

    // HIGHLIGHT
    function highlightFeature(e) {
        const layer = e.target;

        layer.setStyle({
            weight: 5,
            color: '#666',
            dashArray: '',
            fillOpacity: 0.7
        });

        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
            layer.bringToFront();
        }
        info.update(layer.feature.properties);
    }

    function resetHighlight(e) {
        geojson.resetStyle(e.target);

        info.update()
    }

	function onEachFeature(f,l){
        let out = [];
        if (f.properties){
            out.push(f.properties['DESA']);
            l.bindPopup(out.join("<br />"));
            l.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
            });
        }
    }

    function style(f){
        let color = '';
        backEndVillage.forEach(val => {
            color += f.properties['DESA'] == val[0].toUpperCase() ? val[1] : '';
        })
        return {
            "color": color,
            "weight": 2,
            "opacity": 0.2
        };
    }

    // MAPS GEOJSON
    let geojson = new L.GeoJSON.AJAX(backEndGeoJson.split(','),{ onEachFeature, style }).addTo(map);

    // LEGEND
    const legend = L.control({position: 'bottomright'});

    legend.onAdd = function (map) {
        let div = L.DomUtil.create('div', 'info legend');
        div.innerHTML = '<p>Indikator Kelurahan</p>';
        backEndVillage.forEach(val => {
            div.innerHTML += `<p><i style="background:${ val[1] }"></i> ${ ucfirst(val[0]) }</p>`;
        })

        return div;
    };

    legend.addTo(map);
</script>